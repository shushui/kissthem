const express = require('express');
const cors = require('cors');
const { SecretManagerServiceClient } = require('@google-cloud/secret-manager');
const { GoogleGenAI } = require('@google/genai');

const app = express();
const PORT = process.env.PORT || 8080;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.static('.'));

// Initialize Secret Manager client
const secretManager = new SecretManagerServiceClient();

// Cache for secrets
let secretsCache = {};

// Function to get secrets from Google Secret Manager
async function getSecret(secretName) {
    if (secretsCache[secretName]) {
        return secretsCache[secretName];
    }

    try {
        const name = `projects/kissthem/secrets/${secretName}/versions/latest`;
        const [version] = await secretManager.accessSecretVersion({ name });
        const secret = version.payload.data.toString();
        secretsCache[secretName] = secret;
        return secret;
    } catch (error) {
        console.error(`Error accessing secret ${secretName}:`, error);
        throw error;
    }
}

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Process image with Gemini API
app.post('/api/process-image', async (req, res) => {
    try {
        const { image, prompt } = req.body;
        
        if (!image) {
            return res.status(400).json({ error: 'Image data is required' });
        }

        // Get Gemini API key from Secret Manager
        const geminiApiKey = await getSecret('gemini-api-key');
        
        // Initialize Gemini AI with the working "Nano Banana" model for image generation
        const ai = new GoogleGenAI({ apiKey: geminiApiKey });

        // Prepare the image data
        const imageData = {
            inlineData: {
                data: image.split(',')[1], // Remove data:image/...;base64, prefix
                mimeType: 'image/jpeg'
            }
        };

        // Create the prompt for image generation
        const fullPrompt = prompt || "Take this photo and add a cute kiss to it. Generate a new version with the kiss added. Make it look natural and adorable.";

        try {
            console.log('Sending image to Gemini "Nano Banana" model (gemini-2.5-flash-image-preview) for image generation...');
            
            // Generate content with image using the correct API structure
            const response = await ai.models.generateContent({
                model: "gemini-2.5-flash-image-preview",
                contents: [fullPrompt, imageData],
            });
            
            // Check if the response contains generated images
            if (response.candidates && response.candidates[0] && response.candidates[0].content) {
                const content = response.candidates[0].content;
                
                // Look for generated images in the response
                let generatedImage = null;
                let aiResponse = "";
                
                // Process the response parts
                for (const part of content.parts) {
                    if (part.inlineData && part.inlineData.mimeType && part.inlineData.mimeType.startsWith('image/')) {
                        // Found a generated image!
                        generatedImage = `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
                        console.log('🎉 Gemini "Nano Banana" generated a new image!');
                    } else if (part.text) {
                        aiResponse += part.text;
                    }
                }
                
                if (generatedImage) {
                    // Success! Return the AI-generated image
                    res.json({
                        success: true,
                        originalImage: image,
                        processedImage: generatedImage,
                        aiResponse: aiResponse || "Image generated successfully with Gemini 'Nano Banana'!",
                        message: '🎉 Gemini "Nano Banana" generated a new kissed version of your photo! 💋✨'
                    });
                } else {
                    // No image generated, fallback to original image
                    console.log('No image generated by Gemini, returning original image');
                    
                    res.json({
                        success: true,
                        originalImage: image,
                        processedImage: image, // Return original if no generation
                        aiResponse: aiResponse || "AI analyzed your image but couldn't generate a new version.",
                        message: 'Image analyzed by AI (no generation available) 💋'
                    });
                }
            } else {
                // Fallback if response structure is unexpected
                console.log('Unexpected response structure from Gemini, returning original image');
                
                res.json({
                    success: true,
                    originalImage: image,
                    processedImage: image, // Return original if no generation
                    aiResponse: "AI processing completed but no image generation available.",
                    message: 'Image processed (no generation available) 💋'
                });
            }

        } catch (geminiError) {
            console.error('Gemini API error:', geminiError);
            
            // Fallback: return original image with error message
            res.json({
                success: true,
                originalImage: image,
                processedImage: image, // Return original if no generation
                aiResponse: "AI processing failed, but image was uploaded successfully.",
                message: 'Image uploaded (AI processing failed) 💋'
            });
        }

    } catch (error) {
        console.error('Error processing image:', error);
        res.status(500).json({
            error: 'Failed to process image',
            details: error.message
        });
    }
});

// Get OAuth client ID (public info)
app.get('/api/oauth-client-id', async (req, res) => {
    try {
        const clientId = await getSecret('oauth-client-id');
        res.json({ clientId });
    } catch (error) {
        console.error('Error getting OAuth client ID:', error);
        res.status(500).json({ error: 'Failed to get OAuth client ID' });
    }
});

// Start the server
app.listen(PORT, () => {
    console.log(`🚀 Kiss them! backend server running on port ${PORT}`);
    console.log(`📱 Frontend available at: http://localhost:${PORT}`);
    console.log(`🔐 Backend API available at: http://localhost:${PORT}/api`);
});

module.exports = app; 